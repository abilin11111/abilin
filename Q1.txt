









































--------------------playfair-------------------------------------

import java.util.*;

public class PlayFairCryptography {

	static String removeDuplicateElemetsFromKey(String key) {
		if ("" != key && null != key) {
			char array[] = new char[key.length()];
			for (int i = 0; i < array.length; i++) {
				if (isNotContains(array, key.charAt(i))) {
					array[i] = key.charAt(i);
				}
			}
			return removeEmptyElements(array);
		}
		return "";
	}

	static boolean isNotContains(char[] array, char c) {
		for (int i = 0; i < array.length; i++) {
			if (array[i] == c) {
				return false;
			}
		}
		return true;
	}

	static String removeEmptyElements(char[] array) {
		String arrayString = "";
		for (int i = 0; i < array.length; i++) {
			if (array[i] != '\u0000') {
				arrayString += array[i];
			}
		}
		return arrayString;
	}

	static String createKeyAndAlpabetArray(char[] alpabet, String key) {
		char array[] = new char[25];
		for (int i = 0; i < key.length(); i++) {
			array[i] = key.charAt(i);
		}
		int count = key.length();
		for (int i = 0; i < array.length; i++) {

			if (isNotContains(array, alpabet[i])) {
				array[count] = alpabet[i];

				count++;
			}
		}
		return removeEmptyElements(array);
	}

	static char[][] createKeyMatrix(String keyString) {
		char matrix[][] = new char[5][5];
		int k = 0;
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < 5; j++) {
				matrix[i][j] = keyString.charAt(k);
				k++;
			}
		}
		return matrix;
	}

	static void printKeyMatixform(char[][] matrix) {
		for (int i = 0; i < 5; i++) {
			for (int j = 0; j < 5; j++) {
				System.out.print(matrix[i][j] + "   ");
			}
			System.out.println();
		}
	}

	static String toString(char[] ch) {
		String result = "";
		for (int i = 0; i < ch.length; i++) {
			result += ch[i];
		}
		return result;
	}

	static int arrayLength(String str) {
		
		int q = 0;
		int y = 0;
		while (str.charAt(q) != ' ') {
			if (str.charAt(q) == str.charAt(q + 1)) {
				q++;
				y = y + 2;
			} else {
				if (str.charAt(q + 1) == ' ') {
					y = y + 2;
					q++;
				} else {
					y = y + 2;
					q = q + 2;
				}
			}
		}
		return y;
	}

	static char[] breakingTheStringAsPairs(String str) {
		
		char textArr[] = new char[arrayLength(str)];
		int q = 0;
		int y = 0;
		while (y != textArr.length) {
			if (str.charAt(q) == str.charAt(q + 1)) {
				textArr[y] = str.charAt(q);
				textArr[y + 1] = 'X';
				q++;
				y = y + 2;
			} else {
				if (str.charAt(q + 1) == ' ') {
					textArr[y] = str.charAt(q);
					textArr[y + 1] = 'X';
					y = y + 2;
					q++;
				} else {
					textArr[y] = str.charAt(q);
					textArr[y + 1] = str.charAt(q + 1);
					y = y + 2;
					q = q + 2;
				}
			}
		}
		return textArr;
	}

	static int rowIndex(char matrix[][], char letter) {
		int row = 0;

		for (int r = 0; r < 5; r++) {
			for (int c = 0; c < 5; c++) {
				if (matrix[r][c] == letter) {
					row = r;
				}
			}
		}
		return row;
	}

	static int columnIndex(char matrix[][], char letter) {
		int column = 0;

		for (int r = 0; r < 5; r++) {
			for (int c = 0; c < 5; c++) {
				if (matrix[r][c] == letter) {
					column = c;
				}
			}
		}
		return column;
	}

	static String encryption(String str, String key, char[][] matrix) {

		char[] textArr = breakingTheStringAsPairs(str);
		char[] cipher = new char[arrayLength(str)];

		char letter1, letter2;
		int p = 0;

		int r1 = 0;
		int r2 = 0;

		int c1 = 0;
		int c2 = 0;

		int index = 0;

		for (int i = 0; i < cipher.length / 2; i++) {
			letter1 = textArr[p];
			p++;

			r1 = rowIndex(matrix, letter1);
			c1 = columnIndex(matrix, letter1);

			letter2 = textArr[p];
			p++;

			r2 = rowIndex(matrix, letter2);
			c2 = columnIndex(matrix, letter2);

			if (r1 == r2) {
				if (c1 == 4) {
					cipher[index] = matrix[r1][(c1 + 1) % 5];
					index++;
				} else {
					cipher[index] = matrix[r1][c1 + 1];
					index++;
				}

				if (c2 == 4) {
					cipher[index] = matrix[r2][(c2 + 1) % 5];
					index++;
				} else {
					cipher[index] = matrix[r2][c2 + 1];
					index++;
				}
			}

			else if (c1 == c2) {
				if (r1 == 4) {
					cipher[index] = matrix[(r1 + 1) % 5][c1];
					index++;
				} else {
					cipher[index] = matrix[r1 + 1][c1];
					index++;
				}

				if (r2 == 4) {
					cipher[index] = matrix[(r2 + 1) % 5][c2];
					index++;
				} else {
					cipher[index] = matrix[r2 + 1][c2];
					index++;
				}
			}

			else {
				cipher[index] = matrix[r1][c2];
				index++;

				cipher[index] = matrix[r2][c1];
				index++;
			}
		}

		return toString(cipher);
	}

	static char[] toArray(String str){
		char arr[] = new char[str.length()-2];
		for (int i = 0; i < str.length()-2; i++) {
			arr[i] = str.charAt(i);
		}
		return arr;
	}

	static String removeFillerCharacter(char[] arr){
		String plainText="";
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] != 'X') {
				plainText += arr[i];
			}
		}
		return plainText;
	}

	static String decryption(String str, String key, char[][] matrix){
		
		char letter1, letter2;
		int p = 0;

		int r1 = 0;
		int r2 = 0;

		int c1 = 0;
		int c2 = 0;

		int index = 0;

		int n = str.length() - 2;

		char plain[] = new char[n];
		char[] cipher = toArray(str);

		for (int i = 0; i < n / 2; i++) {
			letter1 = cipher[p];
			p++;

			r1 = rowIndex(matrix, letter1);
			c1 = columnIndex(matrix, letter1);

			letter2 = cipher[p];
			p++;

			r2 = rowIndex(matrix, letter2);
			c2 = columnIndex(matrix, letter2);

			if (r1 == r2) {
				if (c1 == 0) {
					plain[index] = matrix[r1][(c1) + 4];
					index++;
				} else {
					plain[index] = matrix[r1][c1 - 1];
					index++;
				}

				if (c2 == 0) {
					plain[index] = matrix[r2][(c2) + 4];
					index++;
				} else {
					plain[index] = matrix[r2][c2 - 1];
					index++;
				}

			}

			else if (c1 == c2) {
				if (r1 == 0) {
					plain[index] = matrix[(r1) + 4][c1];
					index++;
				} else {
					plain[index] = matrix[r1 - 1][c1];
					index++;
				}

				if (r2 == 0) {
					plain[index] = matrix[(r2) + 4][c2];
					index++;
				} else {
					plain[index] = matrix[r2 - 1][c2];
					index++;
				}
			}

			else {
				plain[index] = matrix[r1][c2];
				index++;

				plain[index] = matrix[r2][c1];
				index++;
			}
		}
		String plainText = removeFillerCharacter(plain);
		return plainText;
	}

	public static void main(String[] args) {

		char alphabet[] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
				'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };

		Scanner sc = new Scanner(System.in);

		System.out.print("Enter the message : ");
		String str1 = sc.nextLine();
		String message = (str1.toUpperCase() + " " + " ");

		System.out.println();

		System.out.print("Enter the key : ");
		String key1 = sc.nextLine();
		String key = key1.toUpperCase();

		String uniqueKeyString = removeDuplicateElemetsFromKey(key);
		System.out.println(uniqueKeyString);

		String uniqueArrayString = createKeyAndAlpabetArray(alphabet, uniqueKeyString);
		System.out.println(uniqueArrayString);

		char[][] keyMatrix = createKeyMatrix(uniqueArrayString);
		printKeyMatixform(keyMatrix);

		System.out.println("Select the option : ");
		System.out.println("	1.Encryption");
		System.out.println("	2.Decryption");

		System.out.print("Option(1/2) : ");
		int option = sc.nextInt();

		String cipherText = "";

		if (option == 1) {
			cipherText = encryption(message, key, keyMatrix);
			System.out.println("cipherText : " + cipherText);
		}
		else if (option == 2) {
			String OriginalText = decryption(message, key, keyMatrix);
			System.out.println("Original Text : " + OriginalText);
		}
		else {
			System.out.println("Invalid option");
		}
	}
}

----------------------------------rsa---------------------------------
public class RSA {

    public static void main(String[] args) {
        double p = 2;
        double q = 7;
		
        double msg = 5;

        double n = p * q;
        double phi = (p - 1) * (q - 1);

        double e = 2;
        while (e < phi) {
            if (gcd(e, phi) == 1) {
                break;
            } else {
                e++;
            }
        }

        System.out.println("e value = " + e);

        double d = 0;
        for (int i = 1; i <= 100; i++) {
            double x = 1 + (i * phi);
            if (x % e == 0) {
                d = x / e;
                break;
            }
        }

        System.out.println("d value = " + d);

        System.out.println("Message data = " + msg);

        // Encryption: c = (msg^e) % n
        double c = Math.pow(msg, e);
        c = c % n;
        System.out.println("Encrypted data = " + c);

        // Decryption: m = (c^d) % n
        double m = Math.pow(c, d);
        m = m % n;
        System.out.println("Original Message sent = " + m);
    }

    public static double gcd(double a, double b) {
        while (b != 0) {
            double temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
------------------------railfence----------------------------------------------

class RailFence {

    public static char[][] fillingTheArrayWithCharacter(String text, int key,char ch){
      
        char[][] rail = new char[key][text.length()];
        for (int i = 0; i < key; i++){
            for(int j=0; j<text.length(); j++){
                rail[i][j] = ch;
            }
        }
        return rail;
    }
    
    public static String encryptRailFence(String text, int key) {

        char[][] rail = fillingTheArrayWithCharacter(text,key, '\n');

        boolean dirDown = false;
        int row = 0, col = 0;

        for (int i = 0; i < text.length(); i++) {

            // check the direction of flow
            // reverse the direction if we've just
            // filled the top or bottom rail
				if (row == 0 || row == key - 1)
                dirDown = !dirDown;

            // fill the corresponding alphabet
            rail[row][col++] = text.charAt(i);

            // find the next row using direction flag
            if (dirDown)
                row++;
            else
                row--;
        }

        // now we can construct the cipher using the rail matrix
        String result = "";
        for (int i = 0; i < key; i++)
            for (int j = 0; j < text.length(); j++)
                if (rail[i][j] != '\n')
                    result += (rail[i][j]);

        return result;
    }

    
    public static String decryptRailFence(String cipher, int key) {

        char[][] rail =  fillingTheArrayWithCharacter(cipher,key,'\n');
        
        boolean dirDown = true;

        int row = 0, col = 0;

        // mark the places with '*'
        for (int i = 0; i < cipher.length(); i++) {
            // check the direction of flow
            if (row == 0)
                dirDown = true;
            if (row == key - 1)
                dirDown = false;

            // place the marker
            rail[row][col++] = '*';

            // find the next row using direction flag
            if (dirDown)
                row++;
            else
                row--;
        }

        // now we can construct the fill the rail matrix
        int index = 0;
        for (int i = 0; i < key; i++)
            for (int j = 0; j < cipher.length(); j++)
                if (rail[i][j] == '*' && index < cipher.length())
                    rail[i][j] = cipher.charAt(index++);

        String result = "";

        row = 0;
        col = 0;
        for (int i = 0; i < cipher.length(); i++) {
            // check the direction of flow
            if (row == 0)
                dirDown = true;
            if (row == key - 1)
                dirDown = false;

            // place the marker
            if (rail[row][col] != '*')
                result += rail[row][col++];

            // find the next row using direction flag
            if (dirDown)
                row++;
            else
                row--;
        }
        return result;
    }

    
    public static void main(String[] args) {

        System.out.println("Encrypted Message: ");
        System.out.println(encryptRailFence("Cometothedinnerparty", 2));
        System.out.println(encryptRailFence("Cometothedinerparty", 3));
        
		System.out.println("\nDecrypted Message: ");
		System.out.println(decryptRailFence("Cmtteinratoeohdnepry", 2));
		System.out.println(decryptRailFence("Cteeroeohdnratmtipy", 3));	
    }
}
-------------------------------------polyalpha---------------------------------------


class PolyalphabeticCipher{

static String generateKey(String str, String key){
	int x = str.length();

	for (int i = 0; ; i++)
	{
		if (x == i)
			i = 0;
		if (key.length() == str.length())
			break;
			key += (key.charAt(i));
	}
	return key;
}

static String encryption(String str, String key){

	String cipherText = "";
	for (int i = 0; i < str.length(); i++){
		int x = (str.charAt(i)+ key.charAt(i))%26;
		// convert into alphabets(ASCII)
		x += 'A';

		cipherText+=(char)(x);
	}
	return cipherText;
}

static String decrypt(String cipherText, String key){

	String plaintext = "";
	for (int i = 0; i < cipherText.length(); i++){
		// converting in range 0-25
		int x = (cipherText.charAt(i) - key.charAt(i) + 26) %26;

		// convert into alphabets(ASCII)
		x += 'A';
		plaintext+=(char)(x);
	}
	return plaintext;
}

public static void main(String []args){
	String str = "HELLOWORLD";
	String keyword = "CAR";

	//String str = LowerToUpper(Str);
	//String keyword = LowerToUpper(Keyword);
	String key = generateKey(str, keyword);
	System.out.print("Key :: ");
	System.out.println(key);

	String cipherText = encryption(str, key);
	System.out.print("Cipher text :: ");
	System.out.println(cipherText);

	String originalText = decrypt(cipherText, key);
	System.out.print("Original text :: ");
	System.out.println(originalText);



}
}
------------------------------------otp----------------------------------------------

import java.util.Scanner;
public class OneTimePad {


public static void main(String []args){
	char alpha[] ={'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
	Scanner sc = new Scanner(System.in);
	System.out.print("Enter Plain text :: ");
	String plainText = sc.nextLine();

	System.out.print("Enter Key :: ");
	String key = sc.nextLine();

	System.out.print("Cipher text :: ");
	String ciphertxt = encryption(alpha, plainText, key);
	System.out.println(ciphertxt);

	System.out.print("Plain text :: ");
	String plainmessage = decryption(alpha, ciphertxt, key);
	System.out.print(plainmessage);


}

public static String encryption(char alpha[],String message, String key){
	String ciphertext = "";  //chiper txt ek store kragnn variable ekk (define variable to store chiper text)

	for(int i= 0; i<message.length(); i++){//palaweni akura hoynna
		char msgletter = message.charAt(i);  //first letter of plaintext

		for(int j= 0; j<alpha.length;j++){ // find index of plain text letters
			if(msgletter==alpha[j]){           // message eke letter eka alphabet eke letter ekt samana unoth key eke first ek gnnw
				char keyletter = key.charAt(i); // first letter of key
				
				for(int n= 0; n<alpha.length;n++){ // key eke letters wala index hoynn
					if(keyletter==alpha[n]){
						ciphertext += alpha[(j+n)%26];  // j = index of plaintext n= index of key
						break;
					}
				}
			}
		}
	}		
	return ciphertext;

}
public static String decryption(char alpha[],String message, String key){
	String originaltext = "";
	for(int i= 0; i<message.length(); i++){
		char msgletter = message.charAt(i);

		for(int j= 0; j<alpha.length;j++){
			if(msgletter==alpha[j]){
				char keyletter = key.charAt(i);
				
				for(int n= 0; n<alpha.length;n++){
					if(keyletter==alpha[n]){
						int num = j-n;
						if(num<0){
							num=num+26;
							originaltext += alpha[num%26];
						}
						else{
							originaltext += alpha[num%26];
						}
					}
				}
			}
		}
	}
	return originaltext;
}
}

-----------------------------------------monoalpha---------------------------------------------

import java.util.Scanner;
public class Monoalphabetic{

public static void encryption (String message, char plain[], char cipher[]){
	message = message.toLowerCase();
	System.out.println("plan text :: "+message);
	System.out.print("cipher text: ");
	for(int i = 0; i<message.length(); i++){
		for (int j=0; j<26; j++){
			if(message.charAt(i)==plain[j]){ //is postions are same
				System.out.print(cipher[j]);
			}
		}
	}
	
}
public static void decryption (String ciphermessage, char plain[], char cipher[]){
	
	System.out.println("Chipher message :: "+ciphermessage);
	System.out.println("plain text: ");
	for(int i = 0; i<ciphermessage.length(); i++){
		for (int j=0; j<26; j++){
			if(ciphermessage.charAt(i)==cipher[j]){
				System.out.println(plain[j]);
			}
		}
	}
	
}
public static void main(String [] args){
	char plainAlpha[] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
	char cipherAlpha[] = {'D','K','V','Q','F','I','B','J','W','P','E','S','C','X','H','T','M','Y','A','U','O','L','R','G','Z','N'};
	Scanner scan = new Scanner(System.in);
	
	System.out.println("Enter word:: ");
	String originalMessage = scan.nextLine();
	System.out.println("Enter Option:: ");
	System.out.println("1. Encryption  ");
	System.out.println("2. Decryption ");
	System.out.println("Option:: ");
	int opt = scan.nextInt();
	if(opt==1){
		encryption(originalMessage,plainAlpha,cipherAlpha);
	}else if(opt==2){
		decryption(originalMessage,plainAlpha,cipherAlpha);
	}else{
		System.out.println("Invalid option..... ");
	}
}
	
	
}
------------------------------------------columnar-------------------------------------------

import java.util.Scanner;
public class Monoalphabetic{

public static void encryption (String message, char plain[], char cipher[]){
	message = message.toLowerCase();
	System.out.println("plan text :: "+message);
	System.out.print("cipher text: ");
	for(int i = 0; i<message.length(); i++){
		for (int j=0; j<26; j++){
			if(message.charAt(i)==plain[j]){ //is postions are same
				System.out.print(cipher[j]);
			}
		}
	}
	
}
public static void decryption (String ciphermessage, char plain[], char cipher[]){
	
	System.out.println("Chipher message :: "+ciphermessage);
	System.out.println("plain text: ");
	for(int i = 0; i<ciphermessage.length(); i++){
		for (int j=0; j<26; j++){
			if(ciphermessage.charAt(i)==cipher[j]){
				System.out.println(plain[j]);
			}
		}
	}
	
}
public static void main(String [] args){
	char plainAlpha[] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
	char cipherAlpha[] = {'D','K','V','Q','F','I','B','J','W','P','E','S','C','X','H','T','M','Y','A','U','O','L','R','G','Z','N'};
	Scanner scan = new Scanner(System.in);
	
	System.out.println("Enter word:: ");
	String originalMessage = scan.nextLine();
	System.out.println("Enter Option:: ");
	System.out.println("1. Encryption  ");
	System.out.println("2. Decryption ");
	System.out.println("Option:: ");
	int opt = scan.nextInt();
	if(opt==1){
		encryption(originalMessage,plainAlpha,cipherAlpha);
	}else if(opt==2){
		decryption(originalMessage,plainAlpha,cipherAlpha);
	}else{
		System.out.println("Invalid option..... ");
	}
}
	
	
}
----------------------------------------------------ceasercipher-----------------------------------------------
import java.util.*;

public class CeaserEncryption{
	
	public static final String alpha = "abcdefghijklmnopqrstuvwxyz"; //Define the constant with including English alphabetic letters
	
public static String encrypt(String message, int shiftkey){
	
	message = message.toLowerCase(); //Convert to original plain text into lowercase
	String cipherText = "";
	
	for(int i=0; i<message.length();i++){
		
		char ch = message.charAt(i);   //Find the first character of plain text
		int charposition = alpha.indexOf(ch);  // Find the character position of that character of plain text in the constant
		
		int keyvalue = (charposition+shiftkey)%26;  //Add the shift key value with character position after that mod by 26 then store because of length of alphabet constant is 26
		char replacevalue = alpha.charAt(keyvalue);  //Find the character using replacement from alphabet Constant
		
		cipherText+=replacevalue;
	}
	return cipherText;  //Return the chipertext
}
public static String decrypt(String message, int shiftkey){
	
	message = message.toLowerCase(); //Convert to original plain text into lowercase
	String decryptText = "";
	
	for(int i=0; i<message.length();i++){
		
		char ch = message.charAt(i);  
		int charposition = alpha.indexOf(ch);  
		
		int keyvalue = (charposition-shiftkey)%26;  
		
		if(keyvalue<0){
			keyvalue = alpha.length()+keyvalue; //if keyvalue minus we have to add alphebet length 
		}
		
		char decryptValue = alpha.charAt(keyvalue);
		decryptText += decryptValue;
		
	}
	return decryptText;
}
public static void main(String[] args){
	
	Scanner sc = new Scanner(System.in);
	int key = 0;
	
	System.out.println("Enter String for encryption :: ");
	String originalmessage = sc.nextLine();
	
	System.out.println("\n\n Enter key:: ");
	key = sc.nextInt();
	
	String encryptmessage = encrypt(originalmessage,key);
	System.out.println("Encript message :: "+encryptmessage);
	
	String decryptmessage = decrypt(encryptmessage,key);
	System.out.println("Decript message :: "+decryptmessage);
}
}







