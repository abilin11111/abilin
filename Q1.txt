












































*************2017 2018 Paper*************


Q1) 
		pasengers(PID, PName, Gender, City,PhoneNo,PassportNo)
		Flights(FID, No_Of_Seats,PilotName)
		Routes(RID,Departure, Arrival, Date, Time, No_of_Passangers,FID)
		Booking(PID,RID, Class)
	
		(i) Create a database in the name "Travels".
		
		(ii) Create the tables for the above mentioned logical schema
			 under the "Travels" database and set the PRIMARY Key and the 
			 foreign key together with CASCADE DELETE and UPDATE settings. 
			 Following constraints on the relevant tables,
			 
			 a. In the table "Passengers", insert the  passenger name with the title.
				(eg. If "Gender is male then Mr. <name> otherwise Ms <name>")
				
			 b. In the table "Routes", the data should be generated than current date.
				if not, the status of the route is invalid.
				
			 c. If a new route is assigned to the passangers in the table "Booking"
				then the number of passengers in the table "Routes" has to updated.
				
			 d. If the details of a reservation is deleted then store all the deleted values and the
				user who deltes it in a new table "DELETE_data"
		
		(iii) Test data are given in the text format for each table, in the desktop file
			  "TestData.txt" insert appropriae data into the tables created under "Travels" database
	
	
		(iv) Creat a user ID "staff" and the password "stf@123" whith the privileges to insert, select
			 and delete on the tables "Passengers" and "Booking" and only view other tow tables

	
	
Q2)  	Write a SQL statement to create a proceeduree based on following,
	i. to find a route and insert the booking details in the table "Booking" if the following
		details are available? Passenger name, Travelling date, departure, arrival and perferable class to travel.
		
	ii. to get the named and contact details of the passengers if the status of the route(or flight) is canceled for a given "RID". if not, get the 
		the route status.
		
	iii. Change the status of the route "R103" as Cancelled and get the passenger names and contact details
	
	iv. do a reservationfor "Ms. Shanthi Weerasinghe" who wishes to travel from "Anuradhapura" to "Gampaha" on "2023-08-09" in business class
	

Q3)Write a SQL statement to create a view by the user ID "staff" based on following

	i.  to see the details of the route with minimum number of pasenger
	
	ii. to see details of the passengers reserved in business class
	
	iii. to count the umber of males and femaes reserved in economy class
	
	iv. to count the number of passengers reserved in each of the routes.
	
	v. to List the details of the passengers who treavled more than once.
	
	vi. to List the details of the passengers who reserved flight more than once
	
	vii. to List the details of the passengers who reserved or travelled more than three times
	
	
Q4) Write SQL expressions for each of the following task:

	i. Backup the details of the tables "Passengers" and "booking"
	
	ii. Take a copy of the database without tuples and create a new database "TravelsNew"
		then recover the definition of al tables from the database "Travels " to the database
		"TravelNew"
		
	iii. Login as staff and delete " Mr. Saman Ratnayake" reservation on route "R10"
	
	iv. Revoke deleting privileges from staff on all tables 
	
	
	
	
	
	
	
	
	

	tee C:\backup.txt
i. 
	CREATE DATABASE Travels;

ii. 
	USE Travels;
	
	CREATE TABLE Passengers (
		PID VARCHAR(20) PRIMARY KEY,
		PName VARCHAR(255) NOT NULL,
		Gender ENUM('M', 'F') NOT NULL,
		City VARCHAR(255),
		PhoneNo VARCHAR(20),
		PassportNo VARCHAR(100) UNIQUE
	);
	
	CREATE TABLE Flights (
		FID VARCHAR(20) PRIMARY KEY,
		No_Of_Seats INT,
		PilotName VARCHAR(255)
	);
	
	
	CREATE TABLE Routes (
		RID VARCHAR(20) PRIMARY KEY,
		Departure VARCHAR(255),
		Arrival VARCHAR(255),
		Date DATE,
		Time TIME,
		No_of_Passengers INT,
		FID VARCHAR(20),
		FOREIGN KEY (FID) REFERENCES Flights(FID) ON DELETE CASCADE ON UPDATE CASCADE
	);

	
	CREATE TABLE Booking (
		PID VARCHAR(20),
		RID VARCHAR(20),
		PRIMARY KEY (PID,RID),
		Class VARCHAR(20) NOT NULL,
		FOREIGN KEY (PID) REFERENCES Passengers(PID) ON DELETE CASCADE ON UPDATE CASCADE,
		FOREIGN KEY (RID) REFERENCES Routes(RID) ON DELETE CASCADE ON UPDATE CASCADE
	);
	

iii. 
	SHOW VARIABLES LIKE 'secure_file_priv';
	
	PID,PName,Gender,City,PhoneNo,PassportNo
	P1,"Mr. Nimal Perera",M,Colombo,0710000001,N12345678
	P2,"Ms. Kamala Silva",F,Kandy,0710000002,K23456789
	P3,"Mr. Anura Fernando",M,Galle,0710000003,A34567890
	P4,"Ms. Sunita Kumari",F,Matara,0710000004,S45678901
	P5,"Mr. Sunil Jayawardena",M,Jaffna,0710000005,J56789012
	P6,"Ms. Shanthi Weerasinghe",F,Colombo,0710000006,W67890123
	P7,"Mr. Mahinda Alwis",M,Gampaha,0710000007,M78901234
	P8,"Ms. Priyanka Bandara",F,Kurunegala,0710000008,P89012345
	P9,"Mr. Saman Ratnayake",M,Anuradhapura,0710000009,R90123456
	P10,"Ms. Lakshmi Peiris",F,Ratnapura,0710000010,L01234567
	
	
	INSERT INTO Passengers (PID, PName, Gender, City, PhoneNo, PassportNo)
	VALUES
		('P1', 'Nimal Perera', 'M', 'Colombo', '0710000001', 'N12345678'),
		('P2', 'Kamala Silva', 'F', 'Kandy', '0710000002', 'K23456789'),
		('P3', 'Anura Fernando', 'M', 'Galle', '0710000003', 'A34567890'),
		('P4', 'Sunita Kumari', 'F', 'Matara', '0710000004', 'S45678901'),
		('P5', 'Sunil Jayawardena', 'M', 'Jaffna', '0710000005', 'J56789012'),
		('P6', 'Shanthi Weerasinghe', 'F', 'Colombo', '0710000006', 'W67890123'),
		('P7', 'Mahinda Alwis', 'M', 'Gampaha', '0710000007', 'M78901234'),
		('P8', 'Priyanka Bandara', 'F', 'Kurunegala', '0710000008', 'P89012345'),
		('P9', 'Saman Ratnayake', 'M', 'Anuradhapura', '0710000009', 'R90123456'),
		('P10', 'Lakshmi Peiris', 'F', 'Ratnapura', '0710000010', 'L01234567');
		
		


	 /*LOAD DATA INFILE 'C:/wamp64/tmp/passengers.csv'
		INTO TABLE Passengers
		FIELDS TERMINATED BY ','
		ENCLOSED BY '"'
		LINES TERMINATED BY '\n'
		IGNORE 1 ROWS; */
		
	INSERT INTO flights (FID, No_Of_Seats, PilotName)
	VALUES
		('F1', 100, 'Captain Arjuna'),
		('F2', 200, 'Captain Lakshman'),
		('F3', 150, 'Captain Mohan'),
		('F4', 175, 'Captain Priyankara'),
		('F5', 200, 'Captain Suranga'),
		('F6', 180, 'Captain Tharanga'),
		('F7', 190, 'Captain Nihal'),
		('F8', 170, 'Captain Isurue'),
		('F9', 160, 'Captain Harsha Mendis'),
		('F10', 180, 'Captain Mahesh Kumara');

	LOAD DATA INFILE 'C:/wamp64/tmp/routes.txt'
		INTO TABLE Routes
		FIELDS TERMINATED BY ','
		LINES TERMINATED BY '\n';
	
	INSERT INTO Booking (PID, RID, Class) VALUES
		('P1', 'R1', 'Economy'),
		('P2', 'R2', 'Business'),
		('P3', 'R3', 'First_Class'),
		('P4', 'R4', 'Economy'),
		('P5', 'R5', 'Business'),
		('P6', 'R6', 'First_Class'),
		('P7', 'R7', 'Economy'),
		('P8', 'R8', 'Business'),
		('P9', 'R9', 'First_Class'),
		('P10', 'R10', 'Economy');
		
		
  (a) UPDATE Passengers
			SET PName = CONCAT(IF(Gender = 'M', 'Mr. ', 'Ms. '), PName);

	
  (b)ALTER TABLE Routes
	ADD Status VARCHAR(20) DEFAULT 'Valid' AFTER No_of_Passengers;
	
	DELIMITER //
		CREATE TRIGGER check_route_date
		BEFORE INSERT ON Routes
		FOR EACH ROW
		BEGIN
			IF NEW.Date < CURDATE() THEN
				SET NEW.Status = 'Invalid';
			END IF;
		END//
		DELIMITER ;
		
	INSERT INTO Routes (RID, Departure, Arrival, Date, Time, No_of_Passengers, FID)
	VALUES
		('R11', 'Colombo', 'Jaffna', '2022-07-01', '09:00:00', 100, 'F1'),
		('R12', 'Kandy', 'Galle', '2022-06-30', '10:00:00', 150, 'F2');
		
	(c) 
	
	DELIMITER //
		CREATE TRIGGER update_passenger_count
		AFTER INSERT ON Booking
		FOR EACH ROW
		BEGIN
			UPDATE Routes
			SET No_of_Passengers = No_of_Passengers + 1
			WHERE RID = NEW.RID;
		END//
		DELIMITER ;
		
	(d)
		CREATE TABLE DELETE_data (
		  DeleteID INT AUTO_INCREMENT PRIMARY KEY,
		  TableName VARCHAR(255) NOT NULL,
		  DeletedValues JSON NOT NULL,
		  DeletedBy VARCHAR(255) NOT NULL,
		  DeletedDate DATETIME DEFAULT CURRENT_TIMESTAMP
		);
		
		DELIMITER //
		CREATE TRIGGER capture_deleted_booking
		AFTER DELETE ON Booking
		FOR EACH ROW
		BEGIN
		  INSERT INTO DELETE_data (TableName, DeletedValues, DeletedBy)
		  VALUES ('Booking', JSON_OBJECT('PID', OLD.PID, 'RID', OLD.RID, 'Class', OLD.Class), USER());
		END//
		DELIMITER ;
		
		DELETE FROM Booking
			WHERE PID = 'P1' AND RID = 'R1';

iv. 
	//Create a new user and set the password
	CREATE USER 'staff'@'localhost' IDENTIFIED BY 'stf@123';
	
	//Grant privileges to the user for the desired tables
	GRANT INSERT, SELECT, DELETE ON Travels.Passengers TO 'staff'@'localhost';
	GRANT INSERT, SELECT, DELETE ON Travels.Booking TO 'staff'@'localhost';

	//Grant read-only privileges to view the other tables
	GRANT SELECT ON Travels.Flights TO 'staff'@'localhost';
	GRANT SELECT ON Travels.Routes TO 'staff'@'localhost';
	
	//Flush the privileges for the changes to take effect immediately
	FLUSH PRIVILEGES;


	mysql -u staff -p

	//DROP USER 'username'@'localhost'
	


Q2) 
	i. 

		DELIMITER //

		CREATE PROCEDURE InsertBooking(
			IN passengerName VARCHAR(255),
			IN travelDate DATE,
			IN departure VARCHAR(255),
			IN arrival VARCHAR(255),
			IN travelClass VARCHAR(20)
		)
		BEGIN
			DECLARE routeId VARCHAR(20);
			
			-- Find the route based on the provided departure and arrival
			SELECT RID INTO routeId
			FROM Routes
			WHERE Departure = departure AND Arrival = arrival AND Date = travelDate;
			
			-- Insert the booking details if the route is found
			IF routeId IS NOT NULL THEN
				INSERT INTO Booking (PID, RID, Class)
				SELECT PID, routeId, travelClass
				FROM Passengers
				WHERE PName = passengerName;
				
				SELECT 'Booking successful' AS Message;
			ELSE
				SELECT 'No route available' AS Message;
			END IF;
		END //

		DELIMITER ;
		
		
		CALL InsertBooking('Nimal Perera', '2023-08-01', 'Colombo', 'Jaffna', 'Economy');

	ii. 
		DELIMITER //

		CREATE PROCEDURE GetPassengerDetails(
			IN routeId VARCHAR(20)
		)
		BEGIN
			DECLARE routeStatus VARCHAR(20);
			
			-- Check the status of the route
			SELECT Status INTO routeStatus
			FROM Routes
			WHERE RID = routeId;
			
			-- If route status is canceled, get passenger details
			IF routeStatus = 'Canceled' THEN
				SELECT PName AS PassengerName, PhoneNo AS ContactNumber
				FROM Passengers
				WHERE PID IN (
					SELECT PID
					FROM Booking
					WHERE RID = routeId
				);
			ELSE
				SELECT routeStatus AS RouteStatus;
			END IF;
		END //

		DELIMITER ;
		
		CALL GetPassengerDetails('R12');
		
	
	iii. 
		DELIMITER //

		CREATE PROCEDURE ChangeRouteStatusAndGetPassengerDetails()
		BEGIN
			-- Change the status of route "R103" to "Cancelled"
			UPDATE Routes
			SET Status = 'Cancelled'
			WHERE RID = 'R10';

			-- Get passenger names and contact details for the cancelled route
			SELECT PName AS PassengerName, PhoneNo AS ContactNumber
			FROM Passengers
			WHERE PID IN (
				SELECT PID
				FROM Booking
				WHERE RID = 'R10'
			);
		END //

		DELIMITER ;
		
		
	iv. 
	DELIMITER //

		CREATE PROCEDURE DoReservation(
			IN passengerName VARCHAR(255),
			IN departure VARCHAR(255),
			IN arrival VARCHAR(255),
			IN travelDate DATE,
			IN travelClass VARCHAR(20)
		)
		BEGIN
			-- Find the passenger ID based on the provided passenger name
			SET @passengerId := (SELECT PID FROM Passengers WHERE PName = passengerName);

			-- If passenger ID is found, find the route ID based on the provided departure and arrival
			IF @passengerId IS NOT NULL THEN
				-- Find the route ID
				SET @routeId := (SELECT RID FROM Routes WHERE Departure = departure AND Arrival = arrival AND Date = travelDate);

				-- If route ID is found, insert the booking details
				IF @routeId IS NOT NULL THEN
					-- Check if there are available seats on the route
					SET @availableSeats := (SELECT No_of_Passengers FROM Routes WHERE RID = @routeId);
					SET @flightId := (SELECT FID FROM Routes WHERE RID = @routeId);
					SET @maxSeats := (SELECT No_Of_Seats FROM Flights WHERE FID = @flightId);

					-- Check if there are enough seats available
					IF @availableSeats < @maxSeats THEN
						INSERT INTO Booking (PID, RID, Class) VALUES (@passengerId, @routeId, travelClass);
						UPDATE Routes SET No_of_Passengers = No_of_Passengers + 1 WHERE RID = @routeId;
						SELECT 'Reservation successful.' AS Message;
					ELSE
						SELECT 'No available seats on the route.' AS Message;
					END IF;
				ELSE
					SELECT 'Route not found.' AS Message;
				END IF;
			ELSE
				SELECT 'Passenger not found.' AS Message;
			END IF;
		END //

		DELIMITER ;
		
	CALL DoReservation('Ms. Shanthi Weerasinghe', 'Anuradhapura', 'Gampaha', '2023-08-09', 'Business');


Q3) 
	i. 
	
	CREATE VIEW MinPassengerRoute AS
		SELECT R.RID, R.Departure, R.Arrival, R.Date, R.Time, R.No_of_Passengers
		FROM Routes R
		WHERE R.No_of_Passengers = (SELECT MIN(No_of_Passengers) FROM Routes);
		
	SELECT * FROM MinPassengerRoute;
	
	
	ii. 
	CREATE VIEW PassengersBusinessClass AS
		SELECT P.PID, P.PName, P.Gender, P.City, P.PhoneNo, P.PassportNo, B.RID, B.Class
		FROM Passengers P
		JOIN Booking B ON P.PID = B.PID
		WHERE B.Class = 'Business';
		
	SELECT * FROM PassengersBusinessClass;
	
	
	
	iii. 
	
	CREATE VIEW EconomyClassPassengerCount AS
		SELECT Class, Gender, COUNT(*) AS Count
		FROM Passengers
		JOIN Booking ON Passengers.PID = Booking.PID
		WHERE Class = 'Economy'
		GROUP BY Class, Gender;
		
	SELECT * FROM EconomyClassPassengerCount;
	
	iv. 
	
	CREATE VIEW RoutePassengerCount AS
		SELECT RID, COUNT(*) AS PassengerCount
		FROM Booking
		GROUP BY RID;
		
	SELECT * FROM RoutePassengerCount;

	v.
	
	CREATE VIEW PassengersMoreThanOnce AS
		SELECT P.PID, P.PName, P.Gender, P.City, P.PhoneNo, P.PassportNo
		FROM Passengers P
		JOIN Booking B ON P.PID = B.PID
		GROUP BY P.PID, P.PName, P.Gender, P.City, P.PhoneNo, P.PassportNo
		HAVING COUNT(B.PID) > 1;
		
	SELECT * FROM PassengersMoreThanOnce;


	vi.
	CREATE VIEW PassengersReservedMoreThanOnce AS
		SELECT P.PID, P.PName, P.Gender, P.City, P.PhoneNo, P.PassportNo
		FROM Passengers P
		JOIN Booking B ON P.PID = B.PID
		GROUP BY P.PID, P.PName, P.Gender, P.City, P.PhoneNo, P.PassportNo
		HAVING COUNT(B.RID) > 1;
		
	SELECT * FROM PassengersReservedMoreThanOnce;


	
	
	
	vii. 

	CREATE VIEW PassengersReservedOrTraveledMoreThanThreeTimes AS
		SELECT P.PID, P.PName, P.Gender, P.City, P.PhoneNo, P.PassportNo
		FROM Passengers P
		JOIN Booking B ON P.PID = B.PID
		GROUP BY P.PID, P.PName, P.Gender, P.City, P.PhoneNo, P.PassportNo
		HAVING COUNT(B.RID) + COUNT(B.PID) > 3;
		
	SELECT * FROM PassengersReservedOrTraveledMoreThanZeroTimes;
	


Q4) 
	i.
	SELECT *
		INTO OUTFILE 'C:/wamp64/tmp/passengers_backup.csv'
		FIELDS TERMINATED BY ','
		ENCLOSED BY '"'
		LINES TERMINATED BY '\n'
		FROM Passengers;
		
		
	SELECT *
		INTO OUTFILE 'C:/wamp64/tmp//booking_backup.csv'
		FIELDS TERMINATED BY ','
		ENCLOSED BY '"'
		LINES TERMINATED BY '\n'
		FROM Booking;

		
	ii.
	
	
	iii. 
	DELETE FROM Booking
		WHERE PID = 'P9' AND RID = 'R10';
	
	iv. REVOKE DELETE ON Travels.* FROM 'staff'@'localhost';




************2015/2016*************





CREATE DATABASE Library;

-- Create the Books table
CREATE TABLE Library.Books (
    BookID INT PRIMARY KEY,
    Title VARCHAR(100),
    PurchasePrice DECIMAL(10, 2),
    HireFees DECIMAL(10, 2)
);

-- Create the Customer table
CREATE TABLE Library.Customer (
    CustomerID INT PRIMARY KEY,
    Cname VARCHAR(100),
    Gender VARCHAR(10),
    Delphos VARCHAR(50),
    Address VARCHAR(200)
);

-- Create the Copy table
CREATE TABLE Library.Copy (
    BookID INT,
    CopyID INT,
    Location VARCHAR(100),
    PRIMARY KEY (BookID, CopyID),
    FOREIGN KEY (BookID) REFERENCES Library.Books(BookID)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- Create the Borrowed table
CREATE TABLE Library.Borrowed (
    BookID INT,
    CopyID INT,
    CustomerID INT,
    StartDate DATE,
    Evaluation VARCHAR(100),
    PRIMARY KEY (BookID, CopyID, CustomerID),
    FOREIGN KEY (BookID, CopyID) REFERENCES Library.Copy(BookID, CopyID)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (CustomerID) REFERENCES Library.Customer(CustomerID)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- Insert data into the Books table
INSERT INTO Library.Books (BookID, Title, PurchasePrice, HireFees)
VALUES
    (1, 'Book 1', 19.99, 2.99),
    (2, 'Book 2', 29.99, 3.99),
    (3, 'Book 3', 24.99, 2.49);

-- Insert data into the Customer table
INSERT INTO Library.Customer (CustomerID, Cname, Gender, Delphos, Address)
VALUES
    (1, 'John Doe', 'Male', 'Delphos 1', '123 Main St'),
    (2, 'Jane Smith', 'Female', 'Delphos 2', '456 Elm St'),
    (3, 'Mike Johnson', 'Male', 'Delphos 3', '789 Oak St');

-- Insert data into the Copy table
INSERT INTO Library.Copy (BookID, CopyID, Location)
VALUES
    (1, 1, 'Shelf A1'),
    (1, 2, 'Shelf A2'),
    (2, 1, 'Shelf B1'),
    (2, 2, 'Shelf B2'),
    (3, 1, 'Shelf C1');

-- Insert data into the Borrowed table
INSERT INTO Library.Borrowed (BookID, CopyID, CustomerID, StartDate, Evaluation)
VALUES
    (1, 1, 1, '2023-07-01', 'Good'),
    (2, 1, 2, '2023-07-05', 'Excellent'),
    (3, 1, 3, '2023-07-10', 'Fair');


======================2=======================

i. Find details of all books stocked in London:

SELECT b.*
FROM Books b
JOIN Copy c ON b.BookID = c.BookID
WHERE c.Location = 'London';

ii. Find the book that has the most copies.

SELECT b.*
FROM Books b
JOIN (
    SELECT BookID, COUNT(*) AS CopyCount
    FROM Copy
    GROUP BY BookID
    ORDER BY CopyCount DESC
    LIMIT 1
) c ON b.BookID = c.BookID;


iii. Find the total number of borrowing of each book.

SELECT b.BookID, b.Title, COUNT(*) AS BorrowCount
FROM Books b
JOIN Borrowed br ON b.BookID = br.BookID
GROUP BY b.BookID, b.Title;



iv. Show details of the books with the total revenue that they each generate based on the
borrowing of copies of those books.

SELECT b.BookID, b.Title, COUNT(*) AS BorrowCount, SUM(b.HireFees) AS TotalRevenue
FROM Books b
JOIN Copy c ON b.BookID = c.BookID
JOIN Borrowed br ON c.BookID = br.BookID AND c.CopyID = br.CopyID
GROUP BY b.BookID, b.Title;


v. Show details of customer names and the titles of the books that they have borrowed

SELECT c.Cname, b.Title
FROM Customer c
JOIN Borrowed br ON c.CustomerID = br.CustomerID
JOIN Books b ON br.BookID = b.BookID;

vi. List all customers who have not borrowed any book from the location “York”.

SELECT c.*
FROM Customer c
LEFT JOIN Borrowed br ON c.CustomerID = br.CustomerID
LEFT JOIN Copy cp ON br.BookID = cp.BookID AND br.CopyID = cp.CopyID
WHERE cp.Location <> 'York' OR cp.Location IS NULL;

vii. Find the copies of books that have their number of hiring below the average borrowing
for copies of that book.

SELECT c.*
FROM Copy c
JOIN (
    SELECT BookID, AVG(COUNT(*)) AS AvgBorrowCount
    FROM Borrowed
    GROUP BY BookID
) b ON c.BookID = b.BookID
JOIN Borrowed br ON c.BookID = br.BookID AND c.CopyID = br.CopyID
GROUP BY c.BookID, c.CopyID
HAVING COUNT(*) < b.AvgBorrowCount;

viii. Find names of all female customers who have borrowed a book in 2012.

SELECT c.Cname
FROM Customer c
JOIN Borrowed br ON c.CustomerID = br.CustomerID
JOIN Books b ON br.BookID = b.BookID
WHERE c.Gender = 'Female' AND YEAR(br.StartDate) = 2012;


===================3=================================

i. List the title, purchase price of each book and compares the cost of the book to the
average cost i.e., shows the difference between the book cost and the average cost of
all books.

CREATE VIEW BookCostComparison AS
SELECT b.Title, b.PurchasePrice, b.PurchasePrice - AVG(b.PurchasePrice) OVER() AS CostDifference
FROM Books b;


ii. List the customer ID and name of every Customer along with the books that they have
borrowed within the past 200 days. Include starting date, ending date, and location
name for those borrowing. All customer details (ID and name) should be included in
the output, whether they have actually borrowed any books.

CREATE VIEW BorrowedBooksDetails AS
SELECT c.CustomerID, c.Cname, br.BookID, b.Title, br.StartDate, br.EndDate, c.Location
FROM Customer c
LEFT JOIN Borrowed br ON c.CustomerID = br.CustomerID
LEFT JOIN Copy cp ON br.BookID = cp.BookID AND br.CopyID = cp.CopyID
LEFT JOIN Books b ON cp.BookID = b.BookID
WHERE br.StartDate >= CURDATE() - INTERVAL 200 DAY OR br.StartDate IS NULL;

===================4==========================

Create triggers that enforce the following business rules :
i. Ensure that copies of books stored in London cannot be borrowed during December.

CREATE TRIGGER CheckBorrowingDuringDecember
BEFORE INSERT ON Borrowed
FOR EACH ROW
BEGIN
    IF EXISTS (
        SELECT 1
        FROM Copy c
        WHERE c.BookID = NEW.BookID
        AND c.Location = 'London'
        AND MONTH(NEW.StartDate) = 12
    ) THEN
        SIGNAL SQLSTATE '45000' -- Custom error code
        SET MESSAGE_TEXT = 'Cannot borrow copies stored in London during December.';
    END IF;
END;


ii. If a customer gives a zero evaluation, the details of their borrowing (customer name,
which book, the date of hiring, location of the copy and evaluation) must be placed in
an audit table.
Hint: You will need to construct an audit table with the appropriate columns of
correct data type.

CREATE TABLE AuditBorrowings (
    BorrowID INT,
    CustomerName VARCHAR(100),
    BookTitle VARCHAR(100),
    HiringDate DATE,
    CopyLocation VARCHAR(100),
    Evaluation VARCHAR(100)
);

CREATE TRIGGER LogZeroEvaluationBorrowing
AFTER UPDATE ON Borrowed
FOR EACH ROW
BEGIN
    IF NEW.Evaluation = '0' THEN
        INSERT INTO AuditBorrowings (BorrowID, CustomerName, BookTitle, HiringDate, CopyLocation, Evaluation)
        VALUES (NEW.BorrowID, (
                SELECT Cname
                FROM Customer
                WHERE CustomerID = NEW.CustomerID
            ), (
                SELECT Title
                FROM Books
                WHERE BookID = NEW.BookID
            ), NEW.StartDate, (
                SELECT Location
                FROM Copy
                WHERE BookID = NEW.BookID AND CopyID = NEW.CopyID
            ), NEW.Evaluation
        );
    END IF;
END;


iii. Ensure that records cannot be deleted from the “Borrowed” table if the “StartDate”
field value is earlier than the current date (System Date).

CREATE TRIGGER PreventDeletionIfStartDatePast
BEFORE DELETE ON Borrowed
FOR EACH ROW
BEGIN
    IF OLD.StartDate < CURDATE() THEN
        SIGNAL SQLSTATE '45000' -- Custom error code
        SET MESSAGE_TEXT = 'Cannot delete records with a StartDate earlier than the current date.';
    END IF;
END;








************************************** triggers ************************************************


1) Write a Trigger that stores the old data table of student table in student_backup while
updating the student table.


Student_backup (Stud_ID, Stud_name, Address, Contact_no, Branch, Operation_date)
Student (Stud_ID, Stud_name, Address, Contact_no, Branch)

///backup table

CREATE TABLE student_backup (
    backup_id INT AUTO_INCREMENT PRIMARY KEY,
    Stud_ID INT NOT NULL,
    Stud_name VARCHAR(50) NOT NULL,
    Address VARCHAR(100) NOT NULL,
    Contact_no VARCHAR(15) NOT NULL,
    Branch VARCHAR(50) NOT NULL,
    Operation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


//trigger

DELIMITER $$

CREATE TRIGGER tr_student_update
AFTER UPDATE ON Student
FOR EACH ROW
BEGIN
    INSERT INTO student_backup (Stud_ID, Stud_name, Address, Contact_no, Branch)
    VALUES (OLD.Stud_ID, OLD.Stud_name, OLD.Address, OLD.Contact_no, OLD.Branch);
END $$

DELIMITER ;


********************************************************


2) Write a trigger, that ensures the empno of emp table is in a format ‘E00001’ (empno must
start with ‘E’ and must be 6 characters long). If not, than complete empno with this format
before inserting into the employee table.


CREATE TABLE emp (
    empno VARCHAR(6) NOT NULL,
    empname VARCHAR(50) NOT NULL,
    -- Other columns...
    PRIMARY KEY (empno)
);

CREATE TABLE employee (
    empno VARCHAR(6) NOT NULL,
    empname VARCHAR(50) NOT NULL,
    -- Other columns...
    PRIMARY KEY (empno)
);


DELIMITER $$

CREATE TRIGGER tr_emp_insert
BEFORE INSERT ON emp
FOR EACH ROW
BEGIN
    IF LENGTH(NEW.empno) < 6 THEN
        SET NEW.empno = CONCAT('E', LPAD(NEW.empno, 5, '0'));
    END IF;
END $$

DELIMITER ;


********************************************************


3) Write a trigger which checks the age of employee while inserting the record in emp table. If it
is negative than generate the error and display proper message.


DELIMITER $$

CREATE TRIGGER tr_emp_insert
BEFORE INSERT ON emp
FOR EACH ROW
BEGIN
    IF DATEDIFF(CURDATE(), NEW.birthdate) < 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid birthdate. Age cannot be negative.';
    END IF;
END $$

DELIMITER ;


********************************************************



4) Write a trigger which converts the employee name in upper case if it is inserted in any other
case. Change should be done before the insertion only.


DELIMITER $$

CREATE TRIGGER tr_emp_insert
BEFORE INSERT ON emp
FOR EACH ROW
BEGIN
    IF NEW.empname != UPPER(NEW.empname) THEN
        SET NEW.empname = UPPER(NEW.empname);
    END IF;
END $$

DELIMITER ;

*************************************************


5) WAT that stores the data of emp table in emp_backup table for every delete operation and
store the old data for every update operation.
EMP(Empno, Empname, salary);
Emp_Backup(Empno,Empname,Date_of_operation,Type_of_operation (i.e.update or
delete));


CREATE TABLE Emp (
    Empno INT NOT NULL,
    Empname VARCHAR(50) NOT NULL,
    Salary DECIMAL(10, 2) NOT NULL,
    PRIMARY KEY (Empno)
);

CREATE TABLE Emp_Backup (
    Empno INT NOT NULL,
    Empname VARCHAR(50) NOT NULL,
    Date_of_operation TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Type_of_operation ENUM('update', 'delete') NOT NULL
);


DELIMITER $$

CREATE TRIGGER tr_emp_delete
AFTER DELETE ON Emp
FOR EACH ROW
BEGIN
    INSERT INTO Emp_Backup (Empno, Empname, Type_of_operation)
    VALUES (OLD.Empno, OLD.Empname, 'delete');
END $$

CREATE TRIGGER tr_emp_update
AFTER UPDATE ON Emp
FOR EACH ROW
BEGIN
    INSERT INTO Emp_Backup (Empno, Empname, Type_of_operation)
    VALUES (OLD.Empno, OLD.Empname, 'update');
END $$

DELIMITER ;


****************************************************


6) WAT which display the message ‘Updating’,’Deleting’ or ’Inserting’ when Update, Delete or
Insert operation is performed on the emp table respectively.


DELIMITER $$

CREATE TRIGGER tr_emp_update
AFTER UPDATE ON emp
FOR EACH ROW
BEGIN
    SELECT 'Updating' AS Operation;
END $$

CREATE TRIGGER tr_emp_delete
AFTER DELETE ON emp
FOR EACH ROW
BEGIN
    SELECT 'Deleting' AS Operation;
END $$

CREATE TRIGGER tr_emp_insert
AFTER INSERT ON emp
FOR EACH ROW
BEGIN
    SELECT 'Inserting' AS Operation;
END $$

DELIMITER ;


**********************************************************


7) WAT which generate an error if any user try to delete from product_master table on
weekends (i.e. Saturday and Sunday).

DELIMITER $$

CREATE TRIGGER tr_product_delete
BEFORE DELETE ON product_master
FOR EACH ROW
BEGIN
    IF DAYOFWEEK(CURDATE()) IN (1, 7) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Deleting from product_master is not allowed on weekends.';
    END IF;
END $$

DELIMITER ;


*********************************************************


8) WAT which inserts the value of client_no in the client_master table whenever user tries to
insert data in the emp table. Generate primary key using sequence and enter the
client_no using that sequence.
Client_Master(client_no,client_name,address,city);


CREATE TABLE Client_Master (
    client_no INT AUTO_INCREMENT PRIMARY KEY,
    client_name VARCHAR(100) NOT NULL,
    address VARCHAR(200) NOT NULL,
    city VARCHAR(50) NOT NULL
);


CREATE SEQUENCE client_no_seq START WITH 1;


DELIMITER $$

CREATE TRIGGER tr_emp_insert
BEFORE INSERT ON emp
FOR EACH ROW
BEGIN
    DECLARE next_client_no INT;
    SELECT NEXTVAL(client_no_seq) INTO next_client_no;
    INSERT INTO Client_Master (client_no, client_name, address, city)
    VALUES (next_client_no, 'Client Name', 'Client Address', 'Client City');
END $$

DELIMITER ;


*********************************************************


9) WAT to calculate the Income Tax amount and insert it in emp table.
EMP(emp_no,emp_name, emp_income, income_tax);
If emp_income <100000 and >=50000 then incometax = 10%
If emp_income <200000 and >=100000 then incometax = 15%
If emp_income <300000 and >=200000 then incometax = 20%

ALTER TABLE EMP
ADD COLUMN income_tax DECIMAL(10, 2);


DELIMITER $$

CREATE TRIGGER tr_emp_calculate_income_tax
BEFORE INSERT ON EMP
FOR EACH ROW
BEGIN
    DECLARE tax_rate DECIMAL(4, 2);
    IF NEW.emp_income >= 50000 AND NEW.emp_income < 100000 THEN
        SET tax_rate = 0.10;
    ELSEIF NEW.emp_income >= 100000 AND NEW.emp_income < 200000 THEN
        SET tax_rate = 0.15;
    ELSEIF NEW.emp_income >= 200000 AND NEW.emp_income < 300000 THEN
        SET tax_rate = 0.20;
    ELSE
        SET tax_rate = 0.0;
    END IF;

    SET NEW.income_tax = NEW.emp_income * tax_rate;
END $$

DELIMITER ;


	


************************************** index ************************************************


CREATE INDEX index_name
ON table_name (column1, column2, ...);



**************************************  procedure ************************************************


delimiter ||
CREATE PROCEDURE dorepeat(p1 INT)
BEGIN
SET @x = 0;
REPEAT SET @x = @x + 1; 
UNTIL @x > p1 END REPEAT;
END ||
delimiter ;
CALL dorepeat(1000);


delimiter ||
create procedure proc7(in sal double)
begin
select Name,Salary+sal from Employee;
end ||
delimiter ;
call proc7(15000);


delimiter ||
create procedure proc1(out p1 int)
select count(*) into p1 from Employee;
end ||
delimiter ;
call proc1(@a);
select @a;


1. Create the table student(StuName varchar(20),Marks int)

delimiter ||
create procedure proc3(in Mar int)
select StuName,Marks+Mar as New_Marks from Student;
||
delimiter ;
call proc3(2);


3. Write the procedure to insert the new value into student table

delimiter ||
create procedure proc4(in Nam varchar(20),in Mar int)
insert into Student values(Nam,Mar);
||
delimiter ;
call proc4('Gopi',80);


4. Write the procedure to count the Number of students in the student table

delimiter ||
create procedure proc6(out p1 int)
select count(StuName) into p1 from Student;
||
delimiter ;
call proc6(@No_of_Students);
select @No_of_Students;


5. Write the procedure to view the Marks of <anyname>

delimiter ||
create procedure proc7(in nam varchar(20),out mar int)
select Marks into mar from Student where StuName=nam;
||
delimiter ;
call proc7('Mathu',@Marks);
select @Marks;


2. Write the procedure to increase the Marks by 2 and insert it in to new_Mark column

delimiter ||
create procedure proc8(inout Mar int)
select StuName,Marks+Mar as New_Marks from Student;
||
delimiter ;
set @M=2;
call proc8(@M);


delimiter ||
create procedure updatestatus1(in mark1 int)
begin
declare mymark int;
if mymark>mark1 then
update studentnew set status="pass" where marks=mymark;
else
update studentnew set status="fail" where marks=mymark;
end if;
end;
||


delimiter ||
create procedure pr(inout i int(3),inout j varchar(20),inout k int(2))
select i,j,k;
||
delimiter ;
set @i=002,@j='dad',@k=91;
call pr(@i,@j,@k);


************************************** view ************************************************


a)
(i)create view emp_salary AS SELECT emp_id,basic_salary FROM employee;
	SELECT * from emp_salary;
	
(ii)create view Name_City_Sex AS SELECT first_name,last_name,city,sex from employee;
	select * from Name_City_Sex;
	
(iii)create view Female_Married AS select * from employee WHERE sex='female' AND married='yes';
	select * from Female_Married;
	
(iv)CREATE VIEW emp_id_between_10000_20000 AS select * from employee WHERE basic_salary BETWEEN 10000 AND 20000;
	select * from emp_id_between_10000_20000;
	
(v)create view bornEmpDetails AS select * from employee where dob between '1980-12-12' AND '1990-05-06';
	SELECT * FROM bornEmpDetails;
	
(vi)create view live AS select * from employee where city='Jaffna' OR city='Colombo';
	select * from live;
	
(vii)select * from employee;

(viii)create view FullNameData AS SELECT concat(first_name,' ',last_name) as Full_Name,city FROM employee;
	select * from FullNameData;
	
(b)drop view emp_salary,Name_City_Sex;

(c)drop view Female_Married,emp_id_between_10000_20000,bornEmpDetails,live,FullNameData;


   *************************** CREATE VIEW IN MYSQL Activity 03 Answers *********************

create database EMP;

use EMP;


create table EMPLOYEE (
    emp_ID VARcHAR(10),
    first_name VARcHAR(20),
    last_name VARcHAR(20),
    city VARcHAR(20),
    phone VARcHAR(20),
    married ENUM('yes','no'),
    dob DATE,
    sex ENUM('male','female'),
    basic_salary DECIMAL(10,2)
);

INSERT INTO EMPLOYEE VALUES('E1002','Anne','Santhi','Kandy','2223852','yes','1986-01-01','female',13000.00),
('E1003','Maran','Vithu','Batticaloa','5623856','no','1990-03-30','male',15000.00),
('E1010','Jeya','Kumar','Colombo','8978456','no','1984-12-12','female',25000.00),
('E1004','Aswin','Ravi','Jaffna','2222563','yes','1985-08-12','male',18500.00),
('E1009','Asha','Vimukthi','Batticaloa','2145693','yes','1987-10-27','female',12500.00),
('E1005','Andrew','John','Colombo','7896523','yes','1983-02-28','male',19000.00);


(i.)
    CREATE VIEW EmployeeSalaryView AS
    SELECT emp_ID, basic_salary
    FROM Employee;

    SELECT * FROM EmployeeSalaryView;
(ii.)
    CREATE VIEW displayNameCitySex AS 
    SELECT first_name , last_name , city , sex 
    FROM Employee;

    SELECT * FROM displayNameCitySex;
(iii.)
    CREATE VIEW femaleMarriedEmployee AS
    SELECT first_name , last_name 
    FROM Employee 
    WHERE married = 'yes' AND sex = 'female';

    SELECT * FROM femaleMarriedEmployee;
(iv.)
    CREATE VIEW empId AS
    SELECT emp_ID
    FROM Employee
    WHERE basic_salary > 10000.00 AND basic_salary < 20000.00;

     SELECT * FROM empId;
    -- or

    CREATE VIEW empIdnew AS
    SELECT emp_ID
    FROM Employee 
    WHERE basic_salary BETWEEN 10000.00 AND 20000.00;


    SELECT * FROM empIdnew;

(v.)
   CREATE VIEW empBirth AS
    SELECT first_name, last_name
    FROM employee
    WHERE dob > '1980-12-12' AND dob < '1990-05-06';


    SELECT * FROM empBirth;

 (vi.)
    CREATE VIEW empLives AS
    SELECT first_name , last_name
    FROM employee
    WHERE city = 'Jaffna' OR city = 'Colombo';

    SELECT * FROM empLives;
 (vii.)
    CREATE VIEW EmployeeSummary AS
    SELECT * FROM Employee;

    SELECT * FROM EmployeeSummary;
(viii.)
    CREATE VIEW fullNameEmp AS
    SELECT CONCAT(first_name , ' ' , last_name) AS FullName
    FROM employee;

    SELECT * FROM fullNameEmp;

(b.) how to drop in view table.

   	DROP VIEW EmployeeSalaryView;




************************************** permission ************************************************


//Create a New User
CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';

//list all users
Select user from mysql.user;  

//Review a user’s current permissions
SHOW GRANTS FOR 'username'@'localhost';

//Grant Permission Syntax
GRANT type_of_permission ON database_name.table_name TO 'username'@'localhost';
GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost';

FLUSH PRIVILEGES;

//Revoke Permission Syntax
REVOKE type_of_permission ON database_name.table_name FROM 'username'@'localhost';

//DROP to delete a user
DROP USER 'username'@'localhost';

//Permission types
CREATE – Allows users to create databases/tables
SELECT – Allows users to read data
INSERT – Allows users to insert data
UPDATE – Allows users to update existing data
DELETE – Allows users to delete data
DROP – Allows users to drop databases/tables




************************************** Assesment Queations ************************************************



1. CREATE TABLE CarRental;

2. & 3. 
CREATE TABLE Customer(
	customerid VARCHAR(10) NOT NULL,
	lastname VARCHAR(25) NOT NULL,
	firstname VARCHAR(25) NOT NULL,
	location VARCHAR(25) NOT NULL,
	postalcode VARCHAR(6) NOT NULL,
	PRIMARY KEY(customerid)
);

CREATE TABLE Car(
	modelid VARCHAR(2) NOT NULL,
	model VARCHAR(10) NOT NULL,
	mark VARCHAR(10) NOT NULL,
	year VARCHAR(4) NOT NULL,
	PRIMARY KEY(modelid)
);

CREATE TABLE Registration(
	registration_number VARCHAR(10) NOT NULL,
	modelid VARCHAR(2) NOT NULL,
	rate_per_day DECIMAL(8,2),
	PRIMARY KEY(registration_number),
	FOREIGN KEY(modelid) REFERENCES Car(modelid) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Rent(
	rentid VARCHAR(2),
	customerid VARCHAR(10),
	registration_number VARCHAR(10),
	rent_date DATE,
	numbers_of_days VARCHAR(2),
	total_amount DECIMAL(10,2),
	PRIMARY KEY(rentid),
	FOREIGN KEY(customerid) REFERENCES Customer(customerid) ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY(registration_number) REFERENCES Registration(registration_number) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE OrderDetails(
	OrderNumber INT NOT NULL,
	QuantityOrder INT NOT NULL,
	Price INT NOT NULL,
	Total INT GENERATED ALWAYS AS (Price * QuantityOrder) STORED,
	CustomerName VARCHAR(15) NOT NULL,
	PRIMARY KEY(OrderNumber),
	FOREIGN KEY(CustomerName) REFERENCES Customer(CustomerName) ON DELETE CASCADE ON UPDATE CASCADE
);


INSERT INTO     
StudentDetails(First_name , Last_name , Date_Of_Birth , Class, Contact_Details)    
VALUES 
('Amit', 'Jana', '2004-12-22', 'XI', 1234567890),    
('Manik', 'Aggarwal', '2006-07-04', 'IX', 1245678998),    
('Nitin', 'Das', '2005-03-14', 'X', 2245664909),    
('Priya', 'Pal', '2007-07-24', 'VIII', 3245642199),    
('Biswanath', 'Sharma', '2005-11-11', 'X', 2456789761),    
('Mani', 'Punia', '2006-01-20', 'IX', 3245675421),    
('Pritam', 'Patel', '2008-01-04', 'VII', 3453415421),    
('Sayak', 'Sharma', '2007-05-10', 'VIII' , 1214657890);

LOAD DATA LOCAL INFILE 'C:/wamp64/bin/mysql/mysql5.7.36/data/test1/customer.txt' INTO TABLE Customer;
LOAD DATA LOCAL INFILE 'C:/wamp64/bin/mysql/mysql5.7.36/data/test1/car.txt' INTO TABLE Car;
LOAD DATA LOCAL INFILE 'C:/wamp64/bin/mysql/mysql5.7.36/data/test1/registration.txt' INTO TABLE Registration;
LOAD DATA LOCAL INFILE 'C:/wamp64/bin/mysql/mysql5.7.36/data/test1/rent.txt' INTO TABLE Rent;

LOAD DATA INFILE 'Directory Path/test.txt'
INTO TABLE employee
FIELDS TERMINATED BY ','
(age, first_name, income);

LOAD DATA LOCAL INFILE 'abc.csv' INTO TABLE abc
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n

4. 
CREATE USER 'Kumar'@localhost IDENTIFIED BY '123';
grant insert on carrental.Car to 'Kumar'@localhost;
INSERT INTO Car VALUES
  ('4','Peugeot','407','2015'),
  ('5','Peugeot','307','2014');
  

5. 
CREATE USER 'Bandara'@localhost IDENTIFIED BY '123';
grant ALL PRIVILEGES on carrental.Registration to 'Bandara'@localhost;
UPDATE Registration SET modelid='5' WHERE modelid='1';
  

6.
revoke insert on carrental.Car from 'Kumar'@localhost;
revoke all privileges on carrental.registration from 'Bandara'@localhost;
  

7. 
delimiter ||
create procedure count_total_cars()
select count(*) as No_of_cars from Car;
||
delimiter ;
call procedure count_total_cars();


8. 
delimiter ||
create insert_data()
BEGIN
	insert into customer values
	('3','Martian','Andrew','Batticaloa','30000'),
	('4','Smith','Farida','Colombo','00100');
end ||
delimiter ;
call insert_data();


9. 
delimiter || 
create procedure update_table()
BEGIN
	update Registration set rate_per_day = rate_per_day+1000.00;
END || 
delimiter ;
call update_table();


10. 
a) create view renault_details as select * from car where model='Renault';
b) create view rent_rate as select rentid,(rate_per_day * numbers_of_days) as total_amount from rent as r JOIN registration as re ON r.registration_number=re.registration_number;
c) drop view renault_details, rent_rate;
		
		
	