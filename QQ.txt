
.................................cesar cipher...........................

import java.util.*;

public class CeaserCipher {
	
	static String a = "abcdefghijklmnopqrstuvwxyz";
	
	public static String toSimpleText(String msg) {
		return msg = msg.toLowerCase();
	}
	
	public static String encrypt(String msg, int key) {
		String encryptMsg = "";
		
		for(int i=0; i<msg.length(); i++) {
			int val = a.indexOf(msg.charAt(i));
			int modVal = (val + key) % 26;
			encryptMsg += a.charAt(modVal);
		}
		return encryptMsg;
	}
	
	public static String decrypt(String ciphertext, int key) {
		String decryptMsg = "";
		
		for(int i=0; i<ciphertext.length(); i++) {
			int val = a.indexOf(ciphertext.charAt(i));
			int modVal = (val - key + 26) % 26;
			decryptMsg += a.charAt(modVal);
		}
		return decryptMsg;
	}
	
	public static void main(String[] args) {
		
		Scanner scan = new Scanner(System.in);
		
		System.out.print("Enter message : ");
		String msg = scan.nextLine();
		
		System.out.print("Enter key : ");
		int key = scan.nextInt();
		
		msg = toSimpleText(msg);
		
		String ciphertext = encrypt(msg, key);
		System.out.print("Encryption : " + ciphertext);
		
		String plaintext = decrypt(ciphertext, key);
		System.out.print("\nDecryption : " + plaintext);
		
	}
}


................................Columnar ....................................


import java.util.*;

public class Columnar{
	
	private static Scanner scan = new Scanner(System.in);
	
	private static int[] kywdNumAssign(String key) {
		String alph = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		
		int[] kywdNumList = new int[key.length()];
		
		int z = 0;
		for(int i=0; i<alph.length(); i++) {
			for(int j=0; j<key.length(); j++) {
				if(alph.charAt(i) == key.charAt(j)){
					z++;
					kywdNumList[j] = z;
				}
			}
		}
		return kywdNumList;
	}
	
	private static void encrypt() {
		System.out.print("Enter plaintext: ");
		String plaintext = scan.nextLine();
		
		System.out.print("Enter key: ");
		String key = scan.nextLine();
		
		int[] kywdNumList = kywdNumAssign(key);
		
		int extraLetters = plaintext.length()%key.length();
		
		int dummyCharacters = key.length() - extraLetters;
		
		if(extraLetters != 0) {
			for(int i=0; i<dummyCharacters; i++)
				plaintext += '_';
		}
		
		int numOfRows = plaintext.length()/key.length();
		
		char[][] arr = new char[numOfRows][key.length()];
		
		int z=0;
		for(int i=0; i<numOfRows; i++) {
			for(int j=0; j<key.length(); j++)  {
				arr[i][j] = plaintext.charAt(z);
				z++;
			}
		}
		
		String ciphertext = "";
		for(int i=1; i<=key.length(); i++) {
			int column = -1;
			for(int c=0; c<key.length(); c++) {
				if(kywdNumList[c] == i) {
					column = c;
					break;
				}
			}
			
			for(int j=0; j<numOfRows; j++) {
				ciphertext += arr[j][column];
			}
		}
		System.out.println("Cipher text: " + ciphertext);
	}
	
	private static void decrypt() {
		System.out.print("Enter ciphertext: ");
		String ciphertext = scan.nextLine();
		
		System.out.print("Enter key: ");
		String key = scan.nextLine();
		
		int[] kywdNumList = kywdNumAssign(key);
		
		int numOfRows = ciphertext.length()/key.length();
		
		char[][] arr = new char[numOfRows][key.length()];
		
		int index = 0;
		for(int i=1; i<=key.length(); i++) {
			int column = -1;
			for(int c=0; c<key.length(); c++) {
				if(kywdNumList[c] == i) {
					column = c;
					break;
				}
			}
			
			for(int j=0; j<numOfRows; j++) {
				arr[j][column] = ciphertext.charAt(index++);
			}
		}
		
		String plaintext = "";
		for(int i=0; i<numOfRows; i++) {
			for(int j=0; j<key.length(); j++) {
				plaintext += arr[i][j];
			}
		}
		
		String finalPlaintext = "";
		for(int i=0; i<plaintext.length(); i++) {
			if(plaintext.charAt(i) != '_')
				finalPlaintext += plaintext.charAt(i);
		}
		
		System.out.println("Plain text: " + finalPlaintext);
	}
	
	public static void main(String[] args) {
		
		System.out.println("Select Option - ");
		System.out.println("1 - Encryption");
		System.out.println("2 - Decryption");
		
		System.out.print("Option: ");
		int option = scan.nextInt();
		scan.nextLine();
		
		if(option == 1)
			encrypt();
		else if(option == 2)
			decrypt();
		else {
			System.out.println("Wrong option!");
			System.exit(0);
		}
	}
	
}








//..............................Monoalphebetic....................................



import java.util.*;

public class Monoalphebetic{
	
	public static char plaintext[] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
	public static char codedchar[] = {'d','k','v','q','f','i','b','j','w','p','e','s','c','x','h','t','m','y','a','u','o','l','r','g','z','n'};
	
	public static String encrypt(String msg) {
		msg = msg.toLowerCase();
		String encryptMsg = "";
		
		for(int i=0; i<msg.length(); i++) {
			for(int j=0; j<26; j++) {
				if(msg.charAt(i) == plaintext[j]) {
					encryptMsg += codedchar[j];
					break;
				}
			}
		}
		return encryptMsg;
	}
	
	public static String decrypt(String msg) {
		msg = msg.toLowerCase();
		String decryptMsg = "";
		
		for(int i=0; i<msg.length(); i++) {
			for(int j=0; j<26; j++) {
				if(msg.charAt(i) == codedchar[j]) {
					decryptMsg += plaintext[j];
					break;
				}
			}
		}
		return decryptMsg;
	}
	
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		
		System.out.print("Enter message : ");
		String msg = scan.nextLine();
		
		System.out.println("Options : 1 - Encrypt , 2 - Decrypt");
		System.out.print("Enter Option : ");
		int option = scan.nextInt();
		
		if(option == 1) {
			
			System.out.print("Encryption : " + encrypt(msg));
			
		} else if(option == 2){
			
			System.out.print("Decryption : " + decrypt(msg));
			
		} else {
			System.out.println("Wrong option");
		}
	}
	
}



//......................................OTP.......................................



import java.util.*;

public class OTP{
	
	static char a[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
	
	public static String encrypt(String msg, String key) {
		
		String encryptMsg = "";
		
		for(int i=0; i<msg.length(); i++) {
			char msgVal = msg.charAt(i);
			for(int j=0; j<a.length; j++) {
				if(msgVal == a[j]) {
					char keyVal = key.charAt(i);
					for(int k=0; k<a.length; k++) {
						if(keyVal == a[k]) {
							int modVal = (j + k) % 26;
							encryptMsg += a[modVal];
							break;
						}
					}
				}
			}
		}
		return encryptMsg;
	}
	
	public static String decrypt(String ciphertext, String key) {
		
		String decryptMsg = "";
		
		for(int i=0; i<ciphertext.length(); i++) {
			char ciphertextLetter = ciphertext.charAt(i);
			for(int j=0; j<a.length; j++) {
				if(ciphertextLetter == a[j]) {
					char keyLetter = key.charAt(i);
					for(int k=0; k<a.length; k++) {
						if(keyLetter == a[k]) {
							int num = (j - k);
							
							if(num < 0)
								decryptMsg += a[(num + 26) % 26];
							else
								decryptMsg += a[num];
							break;
						}
					}
				}
			}
		}
		return decryptMsg;
	}
	
	public static void main(String[] args) {
		
		Scanner scan = new Scanner(System.in);
		
		System.out.print("Enter message : ");
		String msg = scan.nextLine();
		
		System.out.print("Enter key : ");
		String key = scan.nextLine();
		
		if(msg.length() != key.length())
			System.out.println("Key length must be equal to message length!!!");
		else {
			String ciphertext = encrypt(msg, key);
			String plaintext = decrypt(ciphertext, key);
			
			System.out.print("Encryption : " + ciphertext);
			System.out.print("\nDecryption : " + plaintext);
		}
		
	}	
}


//.........................Playfair1.................................................



import java.util.*;

public class Playfair1 {
	
	public static String removeDuplicateElementFromKey(String key) {
		
		if(key != null && key != "") {
			
			char[] array = new char[key.length()];
			
			for(int i = 0; i < key.length(); i++) {
				if(isNotContains(array, key.charAt(i))) {
					array[i] = key.charAt(i);
				}
			}
			
			return removeEmptyElements(array);
		}
		
		return "";
	}
	
	public static boolean isNotContains(char[] array, char c) {
		for(int i = 0; i < array.length; i++) {
			if(array[i] == c) {
				return false;
			}
		}
		return true;
	}
	
	public static String removeEmptyElements(char[] array) {
		String keyString = "";
		
		for(int i = 0; i < array.length; i++) {
			if(array[i] != '\u0000') {
				keyString += array[i];
			}
		}
		return keyString;
	}
	
	public static String createArrayString(String uniqueKeyString, char[] alphabet) {
		char[] a = new char[25];
		
		for(int i = 0; i < uniqueKeyString.length(); i++) {
			a[i] = uniqueKeyString.charAt(i);
		}
		
		int count = uniqueKeyString.length();
		
		for(int i = 0; i < a.length; i++) {
			
			if(isNotContains(a, alphabet[i])) {
				
				a[count] = alphabet[i];
				count++;
			}
		}
		
		return removeEmptyElements(a);
	}
	
	public static char[][] createKeyMatrix(String uniqueArrayString) {
		char[][] matrix = new char[5][5];
		
		int key = 0;
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				matrix[i][j] = uniqueArrayString.charAt(key);
				key++;
			}
		}
		return matrix;
	}
	
	public static void printKeyMatrix(char[][] matrix) {
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				System.out.print(matrix[i][j] + " ");
			}
			System.out.println();
		}
	}
	
	public static String toString(char[] array) {
		String cipher = "";
		
		for(int i = 0; i < array.length; i++) {
			cipher += array[i];
		}
		
		return cipher;
	}
	
	public static int rowIndex(char c, char[][] matrix) {
		int index = 0;
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				if(matrix[i][j] == c) {
					index = i;
					break;
				}
			}
		}
		return index;
	}
	
	public static int colIndex(char c, char[][] matrix) {
		int index = 0;
		for(int i = 0; i < 5; i++) {
			for(int j = 0; j < 5; j++) {
				if(matrix[i][j] == c) {
					index = j;
					break;
				}
			}
		}
		return index;
	}
	
	
	public static char[] toArray(String cipherText){
		
		char array[] = new char[cipherText.length()-2];
		
		for(int i=0; i<array.length; i++){
			array[i] = cipherText.charAt(i);
		}
		
		return array;
	}
	
	public static String removeFillerElement(char[] cipherArr){
		String plainText = "";
		
		for(int i=0; i<cipherArr.length; i++){
			if(cipherArr[i] != 'X')
				plainText += cipherArr[i];
		}
		
		return plainText;
	}
	
	
	public static char[] breakPlainTextIntoPairs(String plainText) {
		// 1. call arrayLength method to find out the correct length, after replacing duplicates as well
		char[] textArr = new char[arrayLength(plainText)];
		
		// 2. now we know the correct length, so we have to fill the textArr
		
		int q = 0; // q is to track the characters of the plainText
		int y = 0; // y is to track the current available position in textArr
		
		while(y != textArr.length) {
			if(plainText.charAt(q) == plainText.charAt(q+1)) {
				// near characters are equal
				textArr[y] = plainText.charAt(q);
				textArr[y+1] = 'X';
				q++;
				y = y + 2;
			} else {
				if(plainText.charAt(q+1) == ' ') {
					// the last character
					textArr[y] = plainText.charAt(q);
					textArr[y+1] = 'X';
					q++;
					y = y + 2;
				} else {
					// two near elements are not equal
					textArr[y] = plainText.charAt(q);
					textArr[y+1] = plainText.charAt(q+1);
					q = q + 2;
					y = y + 2;
				}
			}
		}
		return textArr;
	}
	
	public static int arrayLength(String plainText) {
		int q = 0; // q is to track the character in plainText
		int y = 0; // y is to track the length

		while(plainText.charAt(q) != ' ') {
			
			if(plainText.charAt(q) == plainText.charAt(q+1)) {
				// the two near characters are equal, (LL), so since we are going to replace 'LL' as 'LX', so there will be additional 'X'. Therefore y will be increase by 2
				q++;
				y = y + 2;
			} else {
				if(plainText.charAt(q+1) == ' ') {
					// this indicates there are no more elements
					q++;
					y = y + 2;
				} else {
					// two near characters are not equal & there is a pair
					q = q + 2;
					y = y + 2;
				}
			}
		}
		
		return y;
	}
	
	
	
	// ENCRYPTION
	public static String encrypt(String plainText, String key, char[][] keyMatrix) {
		
		// 1. break plain text into pairs
		char[] textArr = breakPlainTextIntoPairs(plainText);
		
		// 2. declare a cipher array
		char[] cipherArr = new char[arrayLength(plainText)];
		
		// 3. encrypt the textArr
		for(int i = 0; i < textArr.length; i=i+2) {
			
			char first = textArr[i];
			char second = textArr[i+1];
			
			int r1 = rowIndex(first, keyMatrix);
			int c1 = colIndex(first, keyMatrix);
			
			int r2 = rowIndex(second, keyMatrix);
			int c2 = colIndex(second, keyMatrix);
			
			if(r1 == r2) {
				// two characters are at the same row
				if(c1 == 4) {
					// character 1 is at last column
					cipherArr[i] = keyMatrix[r1][(c1+1)%5];
				} else {
					cipherArr[i] = keyMatrix[r1][c1+1];
				}
				
				if(c2 == 4) {
					cipherArr[i+1] = keyMatrix[r2][(c2+1)%5];
				} else {
					cipherArr[i+1] = keyMatrix[r2][c2+1];
				}
				
			} else if (c1 == c2) {
				// two characters are at the same column (so the row will change)
				if(r1 == 4) {
					cipherArr[i] = keyMatrix[(r1+1)%5][c1];
				} else {
					cipherArr[i] = keyMatrix[r1+1][c1];
				}
				
				if(r2 == 4) {
					cipherArr[i+1] = keyMatrix[(r2+1)%5][c2];
				} else {
					cipherArr[i+1] = keyMatrix[r2+1][c2];
				}
				
				
			} else {
				// two characters are neither at the same row nor at the same column
				cipherArr[i] = keyMatrix[r1][c2];
				cipherArr[i+1] = keyMatrix[r2][c1];
			}
			
			
		}
		
		return toString(cipherArr);
		
		
	}
	
	
	// DECRYPTION
	public static String decrypt(String cipherText, String key, char[][] keyMatrix) {
		
		// 1. break plain text into pairs
		char[] textArr = toArray(cipherText);
		//char[] textArr = breakPlainTextIntoPairs(cipherText);
		
		// 2. declare a cipher array
		char[] cipherArr = new char[arrayLength(cipherText)];
		
		//System.out.println("textArr lenght : " + textArr.length);
		//System.out.println("cipherArr lenght : " + cipherArr.length);
		
		// 3. encrypt the textArr
		for(int i = 0; i < textArr.length; i=i+2) {
			
			char first = textArr[i];
			char second = textArr[i+1];
			
			int r1 = rowIndex(first, keyMatrix);
			int c1 = colIndex(first, keyMatrix);
			
			int r2 = rowIndex(second, keyMatrix);
			int c2 = colIndex(second, keyMatrix);
			
			if(r1 == r2) {
				// two characters are at the same row
				if(c1 == 0) {
					// character 1 is at last column
					cipherArr[i] = keyMatrix[r1][(c1+4)%5];
				} else {
					cipherArr[i] = keyMatrix[r1][c1-1];
				}
				
				if(c2 == 0) {
					cipherArr[i+1] = keyMatrix[r2][(c2+4)%5];
				} else {
					cipherArr[i+1] = keyMatrix[r2][c2-1];
				}
				
			} else if (c1 == c2) {
				// two characters are at the same column (so the row will change)
				if(r1 == 0) {
					cipherArr[i] = keyMatrix[(r1+4)%5][c1];
				} else {
					cipherArr[i] = keyMatrix[r1-1][c1];
				}
				
				if(r2 == 0) {
					cipherArr[i+1] = keyMatrix[(r2+4)%5][c2];
				} else {
					cipherArr[i+1] = keyMatrix[r2-1][c2];
				}
				
				
			} else {
				// two characters are neither at the same row nor at the same column
				cipherArr[i] = keyMatrix[r1][c2];
				cipherArr[i+1] = keyMatrix[r2][c1];
			}
			
			
		}	
		return removeFillerElement(cipherArr);
	}
	

	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		char[] alphabet = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
		
		System.out.println("Enter message : ");
		String message = sc.nextLine();
		
		message = (message.toUpperCase() + " " + " ");
		
		System.out.println("Enter the key : ");
		String key = sc.nextLine();
		
		key = key.toUpperCase();
		
		String uniqueKeyString = removeDuplicateElementFromKey(key);
		System.out.println("Unique key string : " + uniqueKeyString);
		
		String uniqueArrayString = createArrayString(uniqueKeyString, alphabet);
		System.out.println("Unique array string : " + uniqueArrayString);
		
		char[][] keyMatrix = createKeyMatrix(uniqueArrayString);
		
		System.out.println("Select the option : ");
		System.out.println("    1. Encryption");
		System.out.println("    1. Decryption");
		
		System.out.println("Option (1/2) : ");
		int option = sc.nextInt();
		
		if(option == 1){
			String cipher = encrypt(message, uniqueKeyString, keyMatrix);
			System.out.println("Ciphertext : " + cipher);
		} else if(option == 2){
			String plain = decrypt(message, uniqueKeyString, keyMatrix);
			System.out.println("Plaintext : " + plain);
		} else {
			System.out.println("Wrong option");
		}
	}
}


//.................................Polyalphebetic............................



import java.util.*;

public class Polyalphebetic{
	
	public static String generateKeyMethod(String msg, String key) {
		
		for(int i=0; ; i++) {
			if(msg.length() == i)
				i  = 0;
			if(msg.length() == key.length())
				break;
			
			key += key.charAt(i);
		}
		return key;
	}
	
	public static String encrypt(String msg, String key) {
		
		String encryptMsg = "";
		
		for(int i=0; i<msg.length(); i++) {
			int val = (msg.charAt(i) + key.charAt(i)) % 26;
			val += 'A';
			encryptMsg += (char) val;
		}
		return encryptMsg;
		
	}
	
	public static String decrypt(String ciphertext, String key) {
		
		String decryptMsg = "";
		
		for(int i=0; i<ciphertext.length(); i++) {
			int val = (ciphertext.charAt(i) - key.charAt(i) + 26) % 26;
			val += 'A';
			decryptMsg += (char) val;
		}
		return decryptMsg;
		
	}
	
	public static void main(String[] args) {
		
		Scanner scan = new Scanner(System.in);
		
		System.out.print("Enter message : ");
		String msg = scan.nextLine();
		
		System.out.print("Enter key : ");
		String key = scan.nextLine();
		
		key = generateKeyMethod(msg, key);
		
		System.out.println(key);
		
		String ciphertext = encrypt(msg, key);
		String plaintext = decrypt(ciphertext, key);
		
		System.out.print("Encryption : " + ciphertext);
		System.out.print("\nDecryption : " + plaintext);
		
	}
	
}




//-------------------------RailFence............................................


import java.util.*;

public class RailFence {
	
	public static char[][] fillingTheArrayWithCharacters(String msg, int key, char ch) {
		
		char[][] arr = new char[key][msg.length()];
		
		for(int i=0; i<key; i++) {
			for(int j=0; j<msg.length(); j++) {
				arr[i][j] = ch;
			}
		}
		
		return arr;
		
	}
	
	public static String encrypt(String msg, int key) {
		
		char[][] rail = fillingTheArrayWithCharacters(msg, key, '\n');
		
		boolean dirDown = false;
		int row=0, col=0;
		
		for(int i=0; i<msg.length(); i++) {
			if(row == 0 || row == key-1)
				dirDown = !dirDown;
			
			rail[row][col++] = msg.charAt(i);
			
			if(dirDown)
				row++;
			else
				row--;
		}
		
		String ciphertext = "";
		for(int i=0; i<key; i++) {
			for(int j=0; j<msg.length(); j++) {
				if(rail[i][j] != '\n')
					ciphertext += rail[i][j];
			}
		}
		
		return ciphertext;	
	}
	
	public static String decrypt(String msg, int key) {
		
		char[][] rail = fillingTheArrayWithCharacters(msg, key, '\n');
		
		boolean dirDown = true;
		int row=0, col=0;
		
		for(int i=0; i<msg.length(); i++) {
			if(row == 0)
				dirDown = true;
			if(row == key-1)
				dirDown = false;
			
			rail[row][col++] = '*';
			
			if(dirDown)
				row++;
			else
				row--;
		}
		
		int index = 0;
		for(int i=0; i<key; i++) {
			for(int j=0; j<msg.length(); j++){
				if(rail[i][j] == '*' && index < msg.length())
					rail[i][j] = msg.charAt(index++);
			}
		}
		
		String plaintext = "";
		row=0;
		col=0;
		
		for(int i=0; i<msg.length(); i++) {
			if(row == 0)
				dirDown = true;
			if(row == key-1)
				dirDown = false;
			
			plaintext += rail[row][col++];
			
			if(dirDown)
				row++;
			else
				row--;
		}
		
		return plaintext;
	}

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		
		System.out.print("Enter message: ");
		String msg = scan.nextLine();
		
		System.out.print("Enter key: ");
		int key = scan.nextInt();
		
		String ciphertext = encrypt(msg, key);
		System.out.println("Cipher text: " + ciphertext);
		
		String plaintext = decrypt(ciphertext, key);
		System.out.println("Plain text: " + plaintext);
	}

}


//.................................... RSA......................................................


import java.math.*;

public class RSA {
	
	public static double gcd(double e, double phi) {
		double temp;
		
		while(true) {
			temp = e%phi;
			if(temp == 0)
				return phi;
			e = phi;
			phi = temp;
		}
	}
	
	public static void main(String[] args) {
		double p = 2;
		double q = 7;
		
		double msg = 5;
		
		double n = p*q;
		double phi = (p-1)*(q-1);
		double e = 2;
		
		while(e < phi) {
			if(gcd(e, phi) == 1)
				break;
			else
				e++;
		}
		System.out.println("e value: " + e);
		
		double d=0;
		for(int i=0; i<=100; i++) {
			double x = 1+(i*phi);
			
			if(x%e == 0){
				d = x/e;
				break;
			}
		}
		System.out.println("d value: " + d);
		
		double c = Math.pow(msg,e);
		c = c%n;
		System.out.println("Encryption: " + c);
		
		double m = Math.pow(c,d);
		m = m%n;
		System.out.println("Decrytion: " + m);
	}
	
}